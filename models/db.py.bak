# -*- coding: utf-8 -*-
# this file is released under public domain and you can use without limitations

#########################################################################
## This scaffolding model makes your app work on Google App Engine too
#########################################################################

if request.env.web2py_runtime_gae:            # if running on Google App Engine
    db = DAL('gae://mynamespace')             # connect to Google BigTable
    session.connect(request, response, db = db) # and store sessions and tickets there
    ### or use the following lines to store sessions in Memcache
    # from gluon.contrib.memdb import MEMDB
    # from google.appengine.api.memcache import Client
    # session.connect(request, response, db = MEMDB(Client()))
else:                                         # else use a normal relational database
    db = DAL('sqlite://flisol_inscricao.sqlite')       # if not, use SQLite or other DB
## if no need for session
# session.forget()

#########################################################################
## Here is sample code if you need for
## - email capabilities
## - authentication (registration, login, logout, ... )
## - authorization (role based authorization)
## - services (xml, csv, json, xmlrpc, jsonrpc, amf, rss)
## - crud actions
## (more options discussed in gluon/tools.py)
#########################################################################

from gluon.tools import *
mail = Mail()                                  # mailer
auth = Auth(globals(),db)                      # authentication/authorization
crud = Crud(globals(),db)                      # for CRUD helpers using auth
service = Service(globals())                   # for json, xml, jsonrpc, xmlrpc, amfrpc
plugins = PluginManager()

mail.settings.server = 'logging' or 'smtp.gmail.com:587'  # your SMTP server
mail.settings.sender = 'you@gmail.com'         # your email
mail.settings.login = 'username:password'      # your credentials or None

# Renomeia as tabelas do modulo de autenticacao e controle de acesso
#auth.settings.table_user_name = 'usuarios'
#auth.settings.table_group_name = 'grupos'
#auth.settings.table_membership_name = 'relacionamento'
#auth.settings.table_permission_name = 'autorizacao'
#auth.settings.table_event_name = 'eventos'
auth.settings.hmac_key = 'sha512:1d718a94-81cf-4274-8ac1-42207b203246'   # before define_tables()
auth.define_tables()                           # creates all needed tables
auth.settings.mailer = mail                    # for user email verification
auth.settings.registration_requires_verification = False
auth.settings.registration_requires_approval = False
auth.messages.verify_email = 'Click on the link http://'+request.env.http_host+URL(r=request,c='default',f='user',args=['verify_email'])+'/%(key)s to verify your email'
auth.settings.reset_password_requires_verification = True
auth.messages.reset_password = 'Click on the link http://'+request.env.http_host+URL(r=request,c='default',f='user',args=['reset_password'])+'/%(key)s to reset your password'

#########################################################################
## If you need to use OpenID, Facebook, MySpace, Twitter, Linkedin, etc.
## register with janrain.com, uncomment and customize following
# from gluon.contrib.login_methods.rpx_account import RPXAccount
# auth.settings.actions_disabled=['register','change_password','request_reset_password']
# auth.settings.login_form = RPXAccount(request, api_key='...',domain='...',
#    url = "http://localhost:8000/%s/default/user/login" % request.application)
## other login methods are in gluon/contrib/login_methods
#########################################################################

crud.settings.auth = None                      # =auth to enforce authorization on crud


"""
Tabela usuarios
"""
usuarios = db.define_table(
    auth.settings.table_user_name,
    Field('nome', length=128, default=''),
    Field('username', length = 128, default = '', unique = True),
    Field('email', length=128, default=''),
    Field('password', 'password', length=512,
          readable=False, label='Password'),
    Field('registration_key', length=512,
          writable=False, readable=False, default=''),
    Field('reset_password_key', length=512,
          writable=False, readable=False, default=''),
    Field('registration_id', length=512,
          writable=False, readable=False, default=''))

custom_auth_table = db[auth.settings.table_user_name] # get the custom_auth_table
custom_auth_table.nome.requires = IS_NOT_EMPTY(error_message= T('is_empty'))
custom_auth_table.username.requires = [
            IS_NOT_EMPTY(error_message = T('is_empty')),
            IS_NOT_IN_DB(db, custom_auth_table.username)
]
custom_auth_table.password.requires = [
            # Especifica a complexidade da senha
            # minimo = 6
            # caracteres especiais = 0 (nenhum)
            # caracteres em maiusculo = 0 (nenhum)
            IS_STRONG(min = 6, special = 0, upper = 0),
            CRYPT()]
custom_auth_table.email.requires = [
            IS_EMAIL(error_message=auth.messages.invalid_email)]


"""
Table Tipo de Atividade
"""
tipo_atividade = db.define_table("tipo_atividade",
      SQLField("tipo", "VARCHAR", length=30, notnull=True, default=None),
      SQLField("status", "INTEGER", notnull=True, default='1'))


"""
Table Materiais
"""
materiais = db.define_table("materiais",
      SQLField("material", "VARCHAR", length=40, notnull=True, default=None),
      SQLField("status", "INTEGER", notnull=True, default='1'))



"""
Table curriculo
"""
curriculo = db.define_table("curriculo",
      SQLField("id_usuarios", usuarios),
      SQLField("curriculo", "MEDIUMTEXT", notnull=True, default=None))


"""
Tabela Atividades
"""
atividades = db.define_table("atividades",
      SQLField("id_usuarios", usuarios),
      SQLField("titulo", "VARCHAR", length=50, notnull=True, default=None),
      SQLField("descricao", "MEDIUMTEXT", notnull=True, default=None),
      SQLField("duracao", "TIME", notnull=True, default=None),
      SQLField("tipo_atividade", tipo_atividade),
      SQLField("tags", "VARCHAR", notnull=True, default=None),
      SQLField("up_apresentacao", "VARCHAR", notnull=True, default=None),
      SQLField("id_materiais", materiais),
      SQLField("status", "INTEGER", notnull=True, default='2'))
